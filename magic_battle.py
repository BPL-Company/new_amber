import datetime
import random
import traceback
from telebot import TeleBot, types
from pymongo import MongoClient
from classes.Battle import Battle
from classes.Spell import compute_spell
from locale import rus

creator = 268486177
bot = TeleBot('870593345:AAHburWChfp5ZmPlFahNnxT9G_6ry6y_yPg')
client = MongoClient('mongodb+srv://interbellum_bot:9ga6kKAhm3zAQmp@cluster0-rnman.gcp.mongodb.net/test?retryWrites=true')
db = client.mags
players = db.players

battles = {}
players_in_game = {}


@bot.inline_handler(func=lambda c: True)
def inline_hndlr(q):
    answers = []
    counter = 0
    if q.from_user.id in players_in_game.keys():
        for preset in players_in_game[q.from_user.id].presets:
            answers.append(types.InlineQueryResultArticle(id=counter, title=preset,
                                                          input_message_content=types.InputTextMessageContent(preset)))
            counter += 1
        bot.answer_inline_query(q.id, answers)


@bot.message_handler(commands=['delall'])
def del_all(m):
    if m.from_user.id == creator:
        players.delete_many({})
        bot.reply_to(m, '‚úÖ')


@bot.message_handler(commands=['battle'])
def game(m):
    if m.chat.id in battles:
        return
    battles[m.chat.id] = Battle({})
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è', url='t.me/new_amber_bot?start={}'.format(m.chat.id)))
    bot.send_message(m.chat.id, '–ù–∞—á–∞–ª—Å—è –ø–æ–¥–±–æ—Ä –≤ –∏–≥—Ä—É! –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ...', reply_markup=kb)


@bot.message_handler(commands=['start'])
def start(m):
    if m.chat.type == 'private':
        if not players.find_one({'id': m.from_user.id}):
            bot.send_message(m.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –í –±—É–¥—É—â–µ–º —ç—Ç–æ –±—É–¥–µ—Ç –∏–≥—Ä–∞ –ø–æ –º–æ—Ç–∏–≤–∞–º –∫–Ω–∏–≥–∏ –†–æ–¥–∂–µ—Ä–∞ '
                                        '–ñ–µ–ª—è–∑–Ω—ã "–•—Ä–æ–Ω–∏–∫–∏ –ê–º–±–µ—Ä–∞", –∞ —Å–µ–π—á–∞—Å —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥—Ä–∞–∫–∞ –º–∞–≥–æ–≤. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.\n'
                                        '–ö–∞–∫ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å –º–∏–ª–æ—Ä–¥? (—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, 4-10 —Å–∏–º–≤–æ–ª–æ–≤)')
            bot.register_next_step_handler_by_chat_id(m.chat.id, set_name)
            players.insert_one(new_player(m.from_user.id))
            return
        try:
            chat = int(m.text.split()[1])
            player = players.find_one({'id': m.from_user.id})
            res = battles[chat].add_player(player)
        except Exception as e:
            bot.send_message(m.chat.id, traceback.format_exc())
            return
        if res:
            bot.send_message(m.chat.id, '–í—ã –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ')
            bot.send_message(chat, '–ö –∏–≥—Ä–µ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è {}'.format(m.from_user.first_name))
        if not res:
            bot.send_message(m.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


def set_name(m):
    if m.text.isnumeric() or len(m.text) < 4 or len(m.text) > 10:
        bot.send_message(m.chat.id, '—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, 4-10 —Å–∏–º–≤–æ–ª–æ–≤')
        bot.register_next_step_handler_by_chat_id(m.chat.id, set_name)
        return
    players.update_one({'id': m.chat.id}, {'$set': {'name': m.text}})
    bot.send_message(m.chat.id, '–•–æ—Ä–æ—à–æ, {}'.format(m.text))
    send_menu(m.chat.id)


@bot.message_handler(commands=['go'])
def s(m):
    if m.chat.id not in battles:
        return
    next_id, next_name = battles[m.chat.id].start()
    text = ''
    for mag in battles[m.chat.id].mags.values():
        text += '<b>{}</b>: {}‚ô•Ô∏è\n'.format(mag.name, mag.hp)
        players_in_game[mag.id] = mag
    text += '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü–µ—Ä–≤—ã–π —Ö–æ–¥–∏—Ç {}'.format(next_name)
    bot.send_message(m.chat.id, text, parse_mode='HTML')


@bot.message_handler(func=lambda m: m.chat.type == 'private')
def private_handler(m):
    if m.text == 'üîÆ–ü—Ä–µ—Å–µ—Ç—ã':
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(types.KeyboardButton('üîÆüëÅ‚Äçüó®–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å'))
        kb.add(types.KeyboardButton('üîÆ‚ûï–î–æ–±–∞–≤–∏—Ç—å'))
        kb.add(types.KeyboardButton('üîÆ‚ûñ–£–¥–∞–ª–∏—Ç—å'))
        kb.add(types.KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥'))
        bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb)
    if m.text == 'üîÆüëÅ‚Äçüó®–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        text = '–í–∞—à–∏ –ø—Ä–µ—Å–µ—Ç—ã: \n\n'
        counter = 1
        for preset in players.find_one({'id': m.from_user.id}, {'presets': 1})['presets']:
            text += '{}. {}\n'.format(counter, preset)
            counter += 1
        if counter == 1:
            text = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ—Å–µ—Ç–æ–≤'
        bot.send_message(m.chat.id, text)
    if m.text == 'üîÆ‚ûï–î–æ–±–∞–≤–∏—Ç—å':
        bot.send_message(m.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞...')
        bot.register_next_step_handler_by_chat_id(m.chat.id, text_preset)
    if m.text == 'üîÆ‚ûñ–£–¥–∞–ª–∏—Ç—å':
        bot.send_message(m.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ—Å–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å...')
        bot.register_next_step_handler_by_chat_id(m.chat.id, del_preset)
    if m.text == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
        send_menu(m.chat.id)


def del_preset(m):
    try:
        players.update_one({'id': m.from_user.id},
                           {'$unset': {'presets.{}'.format(int(m.text)-1): ''}})
        players.update_one({'id': m.from_user.id}, {'$pull': {'presets': None}})
    except:
        bot.send_message(m.chat.id, '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞')
        print(traceback.format_exc())
    else:
        bot.send_message(m.chat.id, '–£—Å–ø–µ—à–Ω–æ!')
    send_menu(m.from_user.id)


spells = {}
def text_preset(m):
    spell = compute_spell(m.text)
    text = ''
    if spell.type == 'damage':
        text += '–£—Ä–æ–Ω: {}\n'.format(spell.damage)
    elif spell.type == 'heal':
        text += '–•–∏–ª: {}\n'.format(spell.heal)
    text += '–¢–∏–ø: {}\n'.format(rus(spell.type))
    text += '–û–±–ª–∞—Å—Ç—å: {}\n'.format(rus(spell.area))
    text += '–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã: \n'
    for effect in spell.with_effects:
        text += rus(effect) + '\n'
    kb = types.ReplyKeyboardMarkup()
    btn_yes = types.KeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é')
    btn_no = types.KeyboardButton('‚ùå–û—Ç–º–µ–Ω–∞')
    kb.add(btn_yes, btn_no)
    bot.send_message(m.chat.id, text, reply_markup=kb)
    spells[m.from_user.id] = m.text
    bot.register_next_step_handler_by_chat_id(m.chat.id, last_step_add_preset)


def last_step_add_preset(m):
    if m.text == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
        players.update_one({'id': m.from_user.id}, {'$push': {'presets': spells[m.from_user.id].lower()}})
    spells.pop(m.from_user.id)
    send_menu(m.from_user.id)


@bot.message_handler(content_types=['text'])
def hndl(m):
    if m.chat.id in battles and battles[m.chat.id].status == 'start':
        if m.from_user.id in battles[m.chat.id].mags:
            res, next_mag = battles[m.chat.id].cast(m.from_user.id, m.text.lower())
            if res:
                text = ''
                for mag in battles[m.chat.id].mags.values():
                    text += '<b>{}</b>: {}‚ô•Ô∏è\n'.format(mag.name, mag.hp)
                if next_mag:
                    text += '–°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫: ' + next_mag.name
                res_text, is_end = results_to_text(res)
                bot.send_message(m.chat.id, res_text)
                if is_end:
                    battles.pop(m.chat.id)
                else:
                    bot.send_message(m.chat.id, text, parse_mode='HTML')


def results_to_text(results):
    text = ''
    for ress in results:
        if 'dead' in ress:
            text += '{} —É–º–µ—Ä –æ—Ç {}!\n'.format(ress['dead'].name, ress['from'].name)
            continue
        if 'win' in ress:
            text += '{} –ø–æ–±–µ–¥–∏–ª!'.format(ress['win'].name)
            return text, True
        if 'draw' in ress:
            text += '–ù–∏—á—å—è!'
            return text, True
        if 'heal' in ress:
            if ress['from_mag'] is ress['to_mag']:
                text += '{} –≤—ã—Ö–∏–ª–∏–ª—Å—è –Ω–∞ {}‚ô•Ô∏è!\n'.format(ress['from_mag'].name, ress['heal'])
            else:
                text += '{} –≤—ã—Ö–∏–ª–∏–ª {} –Ω–∞ {}‚ô•Ô∏è!\n'.format(ress['from_mag'].name, ress['to_mag'].name, ress['heal'])
            continue
        if 'success' in ress and not ress['success']:
            text += '–£ –º–∞–≥–∞ {} –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–∫–æ–ª–¥–æ–≤–∞—Ç—å —Å–≤–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ!\n'.format(ress['mag'].name)
            continue
        damage = ress['damage']
        effects = ress['effects']
        this_text = ''
        for effect in effects:
            if 'add_cold' in effect:
                cold = effect['add_cold']
                this_text += '{} –∑–∞–º–æ—Ä–æ–∑–∏–ª {} –Ω–∞ {} —Ö–æ–¥–æ–≤ –∏ –Ω–∞–Ω–µ—Å {} —É—Ä–æ–Ω–∞!\n'\
                    .format(cold.from_mag.name, cold.mag.name, cold.count_turns_to_end, damage)
            if 'add_term_cold' in effect:
                cold = effect['add_term_cold']
                this_text += '{} –ø—Ä–æ–¥–ª–∏–ª –∑–∞–º–æ—Ä–æ–∑–∫—É {} –Ω–∞ {} —Ö–æ–¥–æ–≤ –∏ –Ω–∞–Ω–µ—Å {} —É—Ä–æ–Ω–∞!\n'\
                    .format(cold.from_mag.name, cold.mag.name, cold.power-1, damage)
            if 'end_cold' in effect:
                this_text += '–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∑–∞–º–æ—Ä–æ–∑–∫–∞ –Ω–∞ {}\n'.format(effect['end_cold'])
            if 'add_fire' in effect:
                fire = effect['add_fire']
                this_text += '{} –ø–æ–¥–∂–µ–≥ {} –Ω–∞ {} —Ö–æ–¥–æ–≤!\n'\
                    .format(fire.from_mag.name, fire.mag.name, fire.count_turns_to_end)
            if 'add_term_fire' in effect:
                fire = effect['add_term_fire']
                this_text += '{} –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–∂–∏–≥–∞–Ω–∏–µ {} –Ω–∞ {} —Ö–æ–¥–æ–≤!\n'\
                    .format(fire.from_mag.name, fire.mag.name, fire.power-1)
            if 'end_fire' in effect:
                this_text += '–ó–∞–∫–æ–Ω—á–∏–ª—Å—è –æ–≥–æ–Ω—å –Ω–∞ {}\n'.format(effect['end_fire'])
            if 'fire_do' in effect:
                fire = effect['fire_do']
                this_text += '–û–≥–æ–Ω—å –Ω–∞–Ω–µ—Å {} {} —É—Ä–æ–Ω–∞!\n'.format(fire.mag.name, fire.power)
        if this_text == '' and damage != 0:
            this_text = '{} –Ω–∞–Ω–µ—Å {} —É—Ä–æ–Ω–∞ –º–∞–≥—É {}!\n'.format(ress['from_mag'].name, damage, ress['to_mag'].name)
        text += this_text
    if text == '':
        text = '–ó–∞ —ç—Ç–æ—Ç —Ö–æ–¥ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ.'
    return text, False


def new_player(player_id):
    return {
        'id': player_id,
        'presets': [],
        'lvl': 1,
        'magic': {
            'types': {
                'stone': {
                    'lvl': 1,
                    'with': []
                },
                'cold': {
                    'lvl': 1,
                    'with': []
                },
                'fire': {
                    'lvl': 1,
                    'with': []
                }
            }
        }
    }


def send_menu(player_id):
    text = ''
    player = players.find_one({'id': player_id})
    text += '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {}\n'.format(player['name'])
    text += '‚ú¥Ô∏è–£—Ä–æ–≤–µ–Ω—å: {}\n'.format(player['lvl'])
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton('üîÆ–ü—Ä–µ—Å–µ—Ç—ã'))
    bot.send_message(player_id, text, reply_markup=kb)


bot.polling(none_stop=True, timeout=600)
